{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/Proxies/Entities/LoginCredentialsDto.ts","webpack:///./src/Proxies/Services/Test.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login.component.html","webpack:///./src/app/login.component.ts","webpack:///./src/app/overview.component.html","webpack:///./src/app/overview.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/shared/services/authGuardService.ts","webpack:///./src/shared/services/authService.ts","webpack:///./src/shared/token.interceptor.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";"," // Generated item\r\n    export class LoginCredentialsDto {\r\n        \r\n        public username: string;\r\n        public password: string;\r\n        \r\n    }  \r\n\r\n","ï»¿\r\n\r\n//*************************DO NOT MODIFY**************************\r\n//\r\n//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST\r\n//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION\r\n//\r\n//*************************DO NOT MODIFY**************************\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient} from '@angular/common/http'; \r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PersonDto } from '../Entities/PersonDto';import { LoginCredentialsDto } from '../Entities/LoginCredentialsDto';\r\n@Injectable()\r\nexport class TestController {\r\n    constructor(private _httpClient: HttpClient) { }        \r\n    \r\n    // get: /api/values      \r\n    get(): Observable<PersonDto[]> {\r\n        var _Url = `/api/values`;\r\n            return this._httpClient.get<PersonDto[]>(_Url);\r\n    }\r\n    \r\n    // post: /api/account?userName=${encodeURIComponent(userName)}      \r\n    create(userName: string): Observable<void> {\r\n        var _Url = `/api/account?userName=${encodeURIComponent(userName)}`;\r\n            return this._httpClient.post<void>(_Url,userName);\r\n    }\r\n    \r\n    // post: /api/login      \r\n    login(credentials: LoginCredentialsDto): Observable<void> {\r\n        var _Url = `/api/login`;\r\n            return this._httpClient.post<void>(_Url,credentials);\r\n    }\r\n    \r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { AuthGuardService as AuthGuard } from '../shared/services/authGuardService';\r\n\nconst routes: Routes = [\r\n  { path: 'account/login', component: LoginComponent },\r\n  { path: '', component: OverviewComponent, canActivate: [AuthGuard] }\r\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule {\n}\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\r\\n\"","import { Component } from '@angular/core';\nimport { OnInit } from '@angular/core';\r\nimport { TestController } from '../Proxies/Services/Test.service';\r\nimport { PersonDto } from '../Proxies/Entities/PersonDto';\r\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  constructor(\n    private _testService: TestController\n  ) { }\n\n  ngOnInit() {\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { TestController } from '../Proxies/Services/Test.service';\nimport { AppRoutingModule } from './/app-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { AuthGuardService } from '../shared/services/authGuardService';\r\nimport { AuthService } from '../shared/services/authService';\r\nimport { JwtHelperService } from '@auth0/angular-jwt/src/jwthelper.service';\r\nimport { TokenInterceptor } from '../shared/token.interceptor';\r\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    OverviewComponent\n  ],\n  imports: [\n      BrowserModule,\n      HttpClientModule,\n      AppRoutingModule,\n      FormsModule,\n      ReactiveFormsModule\n  ],\n  providers: [\n    TestController,\n    AuthGuardService,\n    AuthService,\n    JwtHelperService,\n    {\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"ui stackable three column grid \\\" style=\\\"height:100%;\\\">\\r\\n  <div class=\\\"column\\\"></div>\\r\\n  <div class=\\\"ui column middle aligned segment\\\">\\r\\n    <form class=\\\"ui form\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\r\\n      <div class=\\\"field\\\">\\r\\n        <label>Gebruikersnaam</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" formControlName=\\\"username\\\" placeholder=\\\"Gebruikersnaam\\\">\\r\\n      </div>\\r\\n      <div class=\\\"field\\\">\\r\\n        <label>Wachtwoord</label>\\r\\n        <input type=\\\"password\\\"  class=\\\"form-control\\\"  name=\\\"password\\\" formControlName=\\\"password\\\" placeholder=\\\"Wachtwoord\\\">\\r\\n      </div>\\r\\n      <p class=\\\"ui red\\\" *ngIf=\\\"error\\\" style=\\\"color:red;\\\">{{error}}</p>\\r\\n      <button class=\\\"ui button right floated\\\" type=\\\"submit\\\" [disabled]=\\\"!loginForm.valid\\\">Inloggen</button>\\r\\n    </form>\\r\\n    <a (click)=\\\"createAccount()\\\">Maak account</a>\\r\\n  </div>\\r\\n  <div class=\\\"column\\\"></div>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\nimport { OnInit } from '@angular/core';\r\nimport { TestController } from '../Proxies/Services/Test.service';\r\nimport { PersonDto } from '../Proxies/Entities/PersonDto';\r\nimport { LoginCredentialsDto } from '../Proxies/Entities/LoginCredentialsDto';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\n@Component({\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  error: string;\n\n  constructor(\n    private _testService: TestController\n  ) { }\n\n  ngOnInit() {\r\n    this.loginForm = new FormGroup({\r\n      username: new FormControl(\"\", Validators.required),\r\n      password: new FormControl(\"\", Validators.required),\r\n    })\r\n  }\n\n  login() {\n    let credentials = new LoginCredentialsDto();\n    credentials.username = this.loginForm.controls['username'].value;\n    credentials.password = this.loginForm.controls['password'].value;\n\n    this._testService.login(credentials).subscribe(result => {\r\n      this.error = null;\r\n      localStorage.setItem('token', result[\"token\"]);\r\n    }, error => {\r\n      console.log(error);\r\n      this.error = error.error;\r\n    });\r\n  }\n\n  createAccount() {\n      this._testService.create(\"Frank\").subscribe(result => {\r\n      console.log(result);\r\n    });\r\n  }\n}\n","module.exports = \"<h1>Achievement get!</h1>\\r\\n<button (click)=\\\"getValues()\\\"></button>\\r\\n\"","import { Component } from '@angular/core';\nimport { OnInit } from '@angular/core';\r\nimport { TestController } from 'src/Proxies/Services/Test.service';\r\n\n@Component({\n  templateUrl: './overview.component.html',\n})\nexport class OverviewComponent implements OnInit {\n\n  constructor(\n   private _testService: TestController\n  ) { }\n\n  ngOnInit() {\n    console.log(\"overview\");\r\n  }\n\n  getValues() {\n    this._testService.get().subscribe(result => {\r\n      console.log(result);\r\n    })\r\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthService } from './authService';\r\n\r\n@Injectable()\r\nexport class AuthGuardService implements CanActivate {\r\n  constructor(public auth: AuthService, public router: Router) { }\r\n  canActivate(): boolean {\r\n    if (!this.auth.isAuthenticated()) {\r\n      this.router.navigate(['account/login']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n@Injectable()\r\nexport class AuthService {\r\n  jwtHelper: JwtHelperService;\r\n  constructor() {\r\n    this.jwtHelper = new JwtHelperService();\r\n  }\r\n  // ...\r\n  public isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('token');\r\n    // Check whether the token is expired and return\r\n    // true or false\r\n    return !this.jwtHelper.isTokenExpired(token);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor() { }\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: 'Bearer ' + localStorage.getItem('token')\r\n      }\r\n    });\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"sourceRoot":""}